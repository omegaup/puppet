#!/bin/bash -e

PASSWORD=omegaup
C=MX
CA_NAME=
HOSTNAME=
OUTPUT=
CERT_OUTPUT=
ROOT=ssl

usage() {
	echo "$0 <command> [options]"
	echo -e "\tWhere <command> is one of:"
	echo -e "\t\tinit\tInitializes the certificate authority. Requires --ca-name."
	echo -e "\t\tcert\tCreates a cert truststore. Requires --hostname and --output."
	echo -e "\tWhere [options] are one or more of:"
	echo -e "\t\t--root\tSets the path where the ca.crt and ca.seq files are stored"
	echo -e "\t\t--password\tSets the store password"
	echo -e "\t\t--ca-name\tSets the Certificate Authority name"
	echo -e "\t\t--country\tSets the country"
	echo -e "\t\t--hostname\tSets the hostname of the cert"
	echo -e "\t\t--output\tSets the output of the key file"
	echo -e "\t\t--cert-output\tSets the output of the cert file"

	exit 1
}

gen_cert() {
	CN=$1
	TARGET=$2
	CERT_TARGET=$3
	FORMAT=${TARGET##*.}
	DIR=`mktemp -d certmanager.XXXXXXXXXX`

	if [[ -n "${TARGET}" && -f "${TARGET}" ]]; then
		rm "${TARGET}"
	fi
	if [[ -n "${CERT_TARGET}" && -f "${CERT_TARGET}" ]]; then
		rm "${CERT_TARGET}"
	fi

	/usr/bin/openssl genrsa -out "${DIR}/cert.key" 2048
	subject_alt_name=""
	if [[ "${CN}" =~ ^[0-9]+(\.[0-9]+){3}$ ]]; then
		subject_alt_name="subjectAltName=IP:${CN}"
	else
		subject_alt_name="subjectAltName=DNS:${CN}"
	fi

	/usr/bin/openssl req -new -key "${DIR}/cert.key" -out "${DIR}/cert.csr" \
		-config <(
cat <<EOF
[req]
default_bits=2048
prompt=no
default_md=sha1
req_extensions=req_ext
distinguished_name=dn
[dn]
C=${C}
CN=${CN}
[req_ext]
${subject_alt_name}
EOF
	)

	/usr/bin/openssl x509 -req -days 3650 -in "${DIR}/cert.csr" \
		-CA "${ROOT}/ca.crt" -CAcreateserial -CAkey "${ROOT}/ca.key" \
		-out "${DIR}/cert.crt" -extensions req_ext -extfile <(
cat <<EOF
[req_ext]
${subject_alt_name}
EOF
	)

	if [ -n "${CERT_TARGET}" ]; then
		cp "${DIR}/cert.key" "${TARGET}"
		cat "${DIR}/cert.crt" "${ROOT}/ca.crt" > "${CERT_TARGET}"
	else
		cat "${DIR}/cert.key" "${DIR}/cert.crt" "${ROOT}/ca.crt" > "${TARGET}"
	fi

	SERIAL=`openssl x509 -in "${DIR}/cert.crt" -noout -serial | \
		sed -e 's/serial=//'`

	cp "${DIR}/cert.key" "${ROOT}/${CN}-${SERIAL}.key"
	cp "${DIR}/cert.crt" "${ROOT}/${CN}-${SERIAL}.crt"

	rm -rf "${DIR}"
}

gen_ca() {
	CN=$1

	if [ -d "${ROOT}" ]; then
		rm -rf ${ROOT}/*
	fi

	mkdir -p "${ROOT}"
	/usr/bin/openssl genrsa -out "${ROOT}/ca.key" 4096
	/usr/bin/openssl req -new -subj "/C=${C}/CN=${CN}" -x509 -days 3650 \
		-key "${ROOT}/ca.key" -out "${ROOT}/ca.crt"
}

COMMAND=$1
shift || usage

while [[ $# > 1 ]]; do
	KEY=$1
	shift

	case $KEY in
		-p|--password)
			PASSWORD="$1"
			shift || usage
			;;
		-c|--ca-name)
			CA_NAME="$1"
			shift || usage
			;;
		-C|--country)
			C="$1"
			shift || usage
			;;
		-h|--hostname)
			HOSTNAME="$1"
			shift || usage
			;;
		-o|--output)
			OUTPUT="$1"
			shift || usage
			;;
		--cert-output)
			CERT_OUTPUT="$1"
			shift || usage
			;;
		-r|--root)
			ROOT="$1"
			shift || usage
			;;
		*)
			usage
			;;
	esac
done

case "${COMMAND}" in
	init)
		if [ "${CA_NAME}" == "" ]; then
			usage
		fi
		gen_ca "${CA_NAME}"
		;;
	cert)
		if [ \( "${HOSTNAME}" == "" \) -o \( "${OUTPUT}" == "" \) ] ; then
			usage
		fi
		gen_cert "${HOSTNAME}" "${OUTPUT}" "${CERT_OUTPUT}"
		;;
	*)
		usage
		;;
esac
