#!/usr/bin/python3

import hmac
import http.client
import http.server
import json
import logging
import os
import re
import signal
import subprocess
import threading
import urllib.parse
from typing import Any, Dict, List, Optional, Tuple, TypeVar

_COMMIT_RE = re.compile('^/([0-9a-f]{2})([0-9a-f]{38})$')
_GITHUB_SECRET = b''
_GITHUB_TOKEN = None
_HOSTNAME = None
_REMOTE_REF = None
_SLACK_WEBHOOK_URL = ''
_NEWRELIC_API_KEY = None
_NEWRELIC_APPLICATION_ID = None
_WEBHOOK_ROOT = '/var/lib/omegaup/webhook'

_CONDITION = threading.Condition()
_HTTP_SERVER: Optional[http.server.HTTPServer] = None
_QUEUE: List[Optional[Tuple[str, int]]] = []


def _github_report_status(
    commit: str,
    deployment_id: int,
    state: str,
    description: str,
    *,
    log: logging.Logger,
) -> None:
    status_payload = json.dumps({
        'state':
        state,
        'target_url':
        'https://%s/webhook/%s' % (_HOSTNAME, commit),
        'description':
        description,
        'context':
        'deployment/%s/push' % (_HOSTNAME, )
    }).encode('utf-8')
    deployment_payload = json.dumps({
        'state':
        state,
        'log_url':
        'https://%s/webhook/%s' % (_HOSTNAME, commit),
        'description':
        description
    }).encode('utf-8')
    headers = {
        'Authorization': 'token %s' % _GITHUB_TOKEN,
        'Accept': 'application/vnd.github.ant-man-preview+json',
        'Content-Type': 'application/json; charset=utf-8',
        'User-Agent': 'omegaup-webhook',
        'Connection': 'close',
    }
    conn = http.client.HTTPSConnection('api.github.com', 443)
    try:
        try:
            conn.request('POST', '/repos/omegaup/omegaup/statuses/%s' % commit,
                         status_payload, {
                             **headers,
                             **{
                                 'Content-Length': str(len(status_payload))
                             }
                         })
            response = conn.getresponse()
            log.info('Response: Status %d %s. Contents: %r', response.status,
                     response.reason, response.read())
        except http.client.HTTPException:
            log.exception('Failed to send status for commit %s', commit)
        try:
            conn.request(
                'POST', '/repos/omegaup/omegaup/deployments/%d/statuses' %
                deployment_id, deployment_payload, {
                    **headers,
                    **{
                        'Content-Length': str(len(deployment_payload))
                    }
                })
            response = conn.getresponse()
            log.info('Response: Deployment %d %s. Contents: %r',
                     response.status, response.reason, response.read())
        except http.client.HTTPException:
            log.exception('Failed to send status for deployment %s',
                          deployment_id)
    finally:
        conn.close()


def _slack_report_status(
    commit: str,
    state: str,
    *,
    log: logging.Logger,
) -> None:
    _COLOR_MAPPING = {'success': 'good', 'failure': 'danger'}
    format_args = {
        'commit': commit,
        'short_commit': commit[:8],
        'hostname': _HOSTNAME,
        'state': state,
    }
    payload = json.dumps({
        'attachments': [{
            'fallback': ('Deployment of commit {short_commit} on {hostname}: '
                         '{state}').format_map(format_args),
            'text': ('Deployment finished on {hostname}: '
                     '{state}').format_map(format_args),
            'fields': [
                {
                    'title':
                    'Commit',
                    'value':
                    '<https://github.com/omegaup/omegaup/commit/{commit}|{short_commit}>'
                    .format_map(format_args),
                    'short':
                    True
                },
                {
                    'title':
                    'Logs',
                    'value':
                    '<https://{hostname}/webhook/{commit}|View>'.format_map(
                        format_args),
                    'short':
                    True
                },
            ],
            'color':
            _COLOR_MAPPING.get(state, 'danger')
        }]
    }).encode('utf-8')
    headers = {
        'Content-Type': 'application/json',
        'Content-Length': str(len(payload)),
        'User-Agent': 'omegaup-webhook',
        'Connection': 'close',
    }
    url = urllib.parse.urlparse(_SLACK_WEBHOOK_URL)
    assert url.hostname
    conn = http.client.HTTPSConnection(url.hostname, 443)
    try:
        conn.request('POST', url.path, payload, headers)
        response = conn.getresponse()
        log.info('Response: Status %d %s. Contents: %r', response.status,
                 response.reason, response.read())
    except http.client.HTTPException:
        log.exception('Failed to send slack status for commit %s', commit)
    finally:
        conn.close()


def _newrelic_report_deployment(commit: str, *, log: logging.Logger) -> None:
    if not _NEWRELIC_APPLICATION_ID or not _NEWRELIC_API_KEY:
        return

    payload = json.dumps({
        'deployment': {
            'revision': commit,
            'user': 'webhook',
        }
    }).encode('utf-8')
    headers = {
        'Content-Type': 'application/json',
        'Content-Length': str(len(payload)),
        'User-Agent': 'omegaup-webhook',
        'Connection': 'close',
        'X-Api-Key': _NEWRELIC_API_KEY,
    }
    url = urllib.parse.urlparse(
        'https://api.newrelic.com/v2/applications/{}/deployments.json'.format(
            _NEWRELIC_APPLICATION_ID))
    conn = http.client.HTTPSConnection(url.hostname, 443)
    try:
        conn.request('POST', url.path, payload, headers)
        response = conn.getresponse()
        log.info('Response: Status %d %s. Contents: %r', response.status,
                 response.reason, response.read())
    except http.client.HTTPException:
        log.exception(
            'Failed to send New Relic deployment status for commit %s', commit)
    finally:
        conn.close()


class GitHubWebhookHandler(http.server.BaseHTTPRequestHandler):
    def do_POST(self) -> None:
        try:
            content_len = int(self.headers.get('Content-Length', 0))
            raw_payload = self.rfile.read(content_len)
            expected_hmac = 'sha1=%s' % hmac.new(
                _GITHUB_SECRET, raw_payload, digestmod='sha1').hexdigest()
            if self.headers.get('X-Hub-Signature', '') != expected_hmac:
                self.send_response(401)
                return
            payload = json.loads(str(raw_payload, encoding='utf-8'))
            try:
                self.handle_hook_event(
                    self.headers.get('X-GitHub-Event', 'ping'), payload)
                self.send_response(200)
            except:
                logging.exception('Error while handling the event')
                self.send_response(500)
        except:
            logging.exception('Error while reading the payload')
            self.send_response(400)
        finally:
            self.end_headers()

    def do_GET(self) -> None:
        logging.info(self.path)
        match = _COMMIT_RE.match(self.path)
        try:
            if not match:
                logging.error('Not a valid commit: %s', self.path)
                self.send_response(404)
                self.send_header('Content-Length', '0')
                self.end_headers()
                return
            logpath = os.path.join(_WEBHOOK_ROOT, match.group(1),
                                   match.group(2))
            if not os.path.isfile(logpath):
                logging.error('File not found: %s', logpath)
                self.send_response(404)
                self.send_header('Content-Length', '0')
                self.end_headers()
                return
            with open(logpath, 'rb') as logfile:
                log_contents = logfile.read()
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain; charset=utf-8')
            self.send_header('Content-Length', str(len(log_contents)))
            self.end_headers()
            self.wfile.write(log_contents)
        except:
            logging.exception('Failed to send reply')

    def handle_hook_event(self, event: str, payload: Dict[str, Any]) -> None:
        global _QUEUE, _CONDITION, _REMOTE_REF

        logging.info('Request %s, %r', event, payload)
        if event != 'deployment':
            logging.info('Ignoring non-deployment event: %s', event)
            return
        if _REMOTE_REF not in (payload['deployment']['ref'],
                               'refs/heads/%s' % payload['deployment']['ref']):
            logging.info('Ignoring non-%r ref: %s', _REMOTE_REF,
                         payload['deployment']['ref'])
            return
        with _CONDITION:
            _QUEUE.append(
                (payload['deployment']['sha'], payload['deployment']['id']))
            _CONDITION.notify()


class DeployThread(threading.Thread):
    def run(self) -> None:
        global _QUEUE, _CONDITION
        while True:
            with _CONDITION:
                while not _QUEUE:
                    _CONDITION.wait()

                payload = _QUEUE.pop()
                if payload is None:
                    logging.info('Received empty payload. Sending shutdown '
                                 'signal to the server.')
                    assert _HTTP_SERVER
                    _HTTP_SERVER.shutdown()
                    logging.info('Terminating deploy loop.')
                    return
                commit, deployment_id = payload
                logging.info('Deploying %s...', commit)
                logpath = os.path.join(_WEBHOOK_ROOT, commit[:2], commit[2:])
                with open(logpath, 'w') as logfile:
                    log = logging.getLogger(commit)
                    log.propagate = True
                    log.addHandler(logging.StreamHandler(logfile))
                    try:
                        _github_report_status(commit,
                                              deployment_id,
                                              'pending',
                                              'Starting deployment on %s' %
                                              (_HOSTNAME, ),
                                              log=log)
                        os.makedirs(os.path.dirname(logpath), exist_ok=True)
                        res = subprocess.run([
                            '/usr/bin/sudo',
                            '/usr/bin/omegaup-deploy-latest',
                        ],
                                             stdout=logfile,
                                             stderr=subprocess.STDOUT,
                                             universal_newlines=True,
                                             check=False)
                        if res.returncode != 0:
                            logging.error(
                                'Error calling omegaup-deploy-latest for %s',
                                commit)
                            _github_report_status(commit,
                                                  deployment_id,
                                                  'failure',
                                                  'Deployment on %s failed' %
                                                  (_HOSTNAME, ),
                                                  log=log)
                            _slack_report_status(commit, 'failure', log=log)
                            continue

                        logging.info('Successfully deployed %s', commit)
                        _github_report_status(commit,
                                              deployment_id,
                                              'success',
                                              'Deployment on %s succeeded' %
                                              (_HOSTNAME, ),
                                              log=log)
                        _slack_report_status(commit, 'success', log=log)
                        _newrelic_report_deployment(commit, log=log)
                    except:
                        log.exception('Failed to deploy')


FrameType = TypeVar('FrameType')


def _signal_handler(signum: int, _frame: FrameType) -> None:
    logging.info('Received signal %d', signum)
    with _CONDITION:
        _QUEUE.append(None)
        _CONDITION.notify()


def main() -> None:
    global _GITHUB_SECRET, _GITHUB_TOKEN, _HOSTNAME, _HTTP_SERVER, \
            _REMOTE_REF, _SLACK_WEBHOOK_URL, \
            _NEWRELIC_APPLICATION_ID, _NEWRELIC_API_KEY

    logging.basicConfig(level=logging.INFO)

    with open('/etc/omegaup/webhook/config.json') as config_file:
        config = json.load(config_file)
        _HOSTNAME = config['Hostname']
        _GITHUB_SECRET = bytes(config['GitHub']['Secret'], encoding='utf-8')
        _GITHUB_TOKEN = config['GitHub']['OAuthToken']
        _REMOTE_REF = 'refs/heads/%s' % config['GitHub']['Branch']
        _SLACK_WEBHOOK_URL = config['Slack']['WebhookURL']
        if config['NewRelic']:
            _NEWRELIC_APPLICATION_ID = config['NewRelic']['ApplicationID']
            _NEWRELIC_API_KEY = config['NewRelic']['ApiKey']

    logging.info('Starting the webhook service')
    deploy_thread = DeployThread(daemon=True)
    deploy_thread.start()
    server_address = ('localhost', 58517)
    logging.info('Listening on %r', server_address)
    _HTTP_SERVER = http.server.HTTPServer(server_address, GitHubWebhookHandler)

    signal.signal(signal.SIGHUP, _signal_handler)
    signal.signal(signal.SIGTERM, _signal_handler)

    _HTTP_SERVER.serve_forever()
    deploy_thread.join()


if __name__ == '__main__':
    main()

# vim:expandtab ts=4 sw=4
